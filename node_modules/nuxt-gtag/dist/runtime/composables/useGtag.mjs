import { disableGtag, enableGtag, gtag, initGtag } from "../gtag.mjs";
import { useHead, useRuntimeConfig } from "#imports";
export function useGtag() {
  const { gtag: { id: defaultId, config } } = useRuntimeConfig().public;
  let _gtag;
  if (process.server)
    _gtag = () => {
    };
  else if (process.client)
    _gtag = gtag;
  const setConsent = (options) => {
    if (process.client) {
      const hasConsent = options.hasConsent ?? true;
      const id = options.id || defaultId;
      if (!hasConsent) {
        disableGtag(id);
        return;
      }
      if (!window.dataLayer)
        initGtag({ id, config });
      if (window.dataLayer.length > 2) {
        enableGtag(id);
        return;
      }
      useHead({
        script: [{ src: `https://www.googletagmanager.com/gtag/js?id=${id}` }]
      });
    }
  };
  const grantConsent = (id) => {
    setConsent({ id, hasConsent: true });
  };
  const revokeConsent = (id) => {
    setConsent({ id, hasConsent: false });
  };
  return {
    gtag: _gtag,
    setConsent,
    grantConsent,
    revokeConsent
  };
}
